// Copyright (c) 2017-2018 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// dnsmasq configlets for overlay and underlay interfaces towards domU

package zedrouter

import (
	"bytes"
	"fmt"
	"io"
	"net"
	"os"
	"strconv"
	"strings"
	"syscall"
	"time"

	"github.com/lf-edge/eve/pkg/pillar/base"
	"github.com/lf-edge/eve/pkg/pillar/devicenetwork"
	"github.com/lf-edge/eve/pkg/pillar/types"
	"github.com/lf-edge/eve/pkg/pillar/utils"
	"github.com/sirupsen/logrus"
)

// XXX inotify seems to stop reporting any changes in some cases
// XXX avoid by start and stop dnsmasq when we add entries
// XXX KALYAN - We need to set this to have DHCP working with Network instances.
//
//	Turning this flag on temporarily till we figure out what's happening.
const dnsmasqStopStart = false // XXX change? remove?

const dnsmasqStatic = `
# Automatically generated by zedrouter
except-interface=lo
bind-interfaces
quiet-dhcp
quiet-dhcp6
no-hosts
no-ping
bogus-priv
neg-ttl=10
dhcp-ttl=600
`

func dnsmasqInitDirs() {
	if _, err := os.Stat(devicenetwork.DnsmasqLeaseDir); err != nil {
		log.Functionf("Create %s\n", devicenetwork.DnsmasqLeaseDir)
		if err := os.Mkdir(devicenetwork.DnsmasqLeaseDir, 0755); err != nil {
			log.Fatal(err)
		}
	} else {
		// dnsmasq needs to read as nobody
		if err := os.Chmod(devicenetwork.DnsmasqLeaseDir, 0755); err != nil {
			log.Fatal(err)
		}
	}
}

func dnsmasqClearLeases() {
	leasesFile := "/var/lib/misc/dnsmasq.leases"
	if _, err := os.Stat(leasesFile); err == nil {
		if err := os.Remove(leasesFile); err != nil {
			log.Fatal(err)
		}
	}
}

func dnsmasqConfigFile(bridgeName string) string {
	cfgFilename := "dnsmasq." + bridgeName + ".conf"
	return cfgFilename
}

func dnsmasqConfigPath(bridgeName string) string {
	cfgFilename := dnsmasqConfigFile(bridgeName)
	cfgPathname := runDirname + "/" + cfgFilename
	return cfgPathname
}

func dnsmasqDhcpHostDir(bridgeName string) string {
	dhcphostsDir := runDirname + "/dhcp-hosts." + bridgeName
	return dhcphostsDir
}

// createDnsmasqConfiglet
// When we create a linux bridge we set this up
// Also called when we need to update the ipsets
func createDnsmasqConfiglet(
	ctx *zedrouterContext,
	bridgeName string, bridgeIPAddr net.IP,
	netstatus *types.NetworkInstanceStatus, hostsDir string,
	ipsetHosts []string, uplink string,
	dnsServers []net.IP, ntpServers []net.IP) {

	log.Functionf("createDnsmasqConfiglet(%s, %s) netstatus %v, ipsetHosts %v uplink %s dnsServers %v ntpServers %v",
		bridgeName, bridgeIPAddr, netstatus, ipsetHosts, uplink, dnsServers, ntpServers)

	cfgPathname := dnsmasqConfigPath(bridgeName)
	// Delete if it exists
	if _, err := os.Stat(cfgPathname); err == nil {
		if err := os.Remove(cfgPathname); err != nil {
			errStr := fmt.Sprintf("createDnsmasqConfiglet %v",
				err)
			log.Errorln(errStr)
		}
	}
	file, err := os.Create(cfgPathname)
	if err != nil {
		log.Fatal("createDnsmasqConfiglet failed ", err)
	}
	defer file.Close()

	// Create a dhcp-hosts directory to be used when hosts are added
	dhcphostsDir := dnsmasqDhcpHostDir(bridgeName)
	ensureDir(dhcphostsDir)

	createDnsmasqConfigletToWriter(file, ctx, bridgeName, bridgeIPAddr, netstatus, hostsDir, ipsetHosts, uplink, dnsServers, ntpServers)
}

func dhcpv4RangeConfig(start, end net.IP) (string, error) {
	var dhcpRange string

	if start != nil {
		if end == nil {
			dhcpRange = fmt.Sprintf("%s,static", start.String())
		} else {
			if bytes.Compare(start, end) > 0 {
				return dhcpRange, fmt.Errorf("createDnsmasqConfigletToWriter: invalid dhcp-range %s-%s",
					start.String(), end.String())
			}
			// full dhcp-range is not possible with static, see https://thekelleys.org.uk/dnsmasq/docs/dnsmasq-man.html
			// "dhcp-range=[tag:<tag>[,tag:<tag>],][set:<tag>,]<start-addr>[,<end-addr>|<mode>[,<netmask>[,<broadcast>]]][,<lease time>]"
			dhcpRange = fmt.Sprintf("%s,%s", start.String(), end.String())
		}
	}

	return dhcpRange, nil
}

func createDnsmasqConfigletToWriter(
	buffer io.Writer,
	ctx *zedrouterContext,
	bridgeName string, bridgeIPAddr net.IP,
	netstatus *types.NetworkInstanceStatus, hostsDir string,
	ipsetHosts []string, uplink string,
	dnsServers []net.IP, ntpServers []net.IP) {

	io.WriteString(buffer, dnsmasqStatic)

	dhcphostsDir := dnsmasqDhcpHostDir(bridgeName)

	// XXX look at zedrouter loglevel; perhaps we should introduce a
	// separate logger for dnsmasq or per bridge to have more fine-grained
	// control
	switch logger.GetLevel() {
	case logrus.TraceLevel:
		io.WriteString(buffer, "log-queries\n")
		io.WriteString(buffer, "log-dhcp\n")
	case logrus.DebugLevel:
		io.WriteString(buffer, "log-dhcp\n")
	}

	io.WriteString(buffer, fmt.Sprintf("dhcp-leasefile=%s\n",
		devicenetwork.DnsmasqLeaseFilePath(bridgeName)))

	// Pick file where dnsmasq should send DNS read upstream
	// If we have no uplink for this network instance that is nowhere
	// If we have an uplink but no dnsServers for it, then we let
	// dnsmasq use the host's /etc/resolv.conf
	if uplink == "" {
		io.WriteString(buffer, "no-resolv\n")
	} else if len(dnsServers) != 0 {
		for _, s := range dnsServers {
			io.WriteString(buffer, fmt.Sprintf("server=%s@%s\n", s, uplink))
		}
		io.WriteString(buffer, "no-resolv\n")
	}

	for _, host := range ipsetHosts {
		ipsetBasename := hostIpsetBasename(host)
		io.WriteString(buffer, fmt.Sprintf("ipset=/%s/ipv4.%s,ipv6.%s\n",
			host, ipsetBasename, ipsetBasename))
	}
	io.WriteString(buffer, fmt.Sprintf("pid-file=/run/dnsmasq.%s.pid\n",
		bridgeName))
	io.WriteString(buffer, fmt.Sprintf("interface=%s\n", bridgeName))
	isIPv6 := false
	if !isEmptyIP(bridgeIPAddr) {
		isIPv6 = bridgeIPAddr.To4() == nil
		io.WriteString(buffer, fmt.Sprintf("listen-address=%s\n",
			bridgeIPAddr))
	} else {
		// XXX error if there is no bridgeIPAddr?
	}
	io.WriteString(buffer, fmt.Sprintf("hostsdir=%s\n", hostsDir))
	io.WriteString(buffer, fmt.Sprintf("dhcp-hostsdir=%s\n", dhcphostsDir))

	ipv4Netmask := "255.255.255.0" // Default unless there is a Subnet

	// By default dnsmasq advertises a router (and we can have a
	// static router defined in the NetworkInstanceConfig).
	// To support airgap networks we interpret gateway=0.0.0.0
	// to not advertise ourselves as a router. Also,
	// if there is not an explicit dns server we skip
	// advertising that as well.
	advertizeRouter := true
	var router string

	if netstatus.Logicallabel == "" {
		log.Functionf("Internal switch without external port case, dnsmasq suppress router advertise\n")
		advertizeRouter = false
	} else if netstatus.Gateway != nil {
		if netstatus.Gateway.IsUnspecified() {
			advertizeRouter = false
		} else {
			router = netstatus.Gateway.String()
		}
	} else if !isEmptyIP(bridgeIPAddr) {
		router = bridgeIPAddr.String()
	} else {
		advertizeRouter = false
	}
	if netstatus.DomainName != "" {
		if isIPv6 {
			io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:domain-search,%s\n",
				netstatus.DomainName))
		} else {
			io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:domain-name,%s\n",
				netstatus.DomainName))
		}
	}
	advertizeDns := false
	if len(netstatus.DnsServers) > 0 {
		advertizeDns = true
		var addrList []string
		for _, srvIP := range netstatus.DnsServers {
			addrList = append(addrList, srvIP.String())
		}
		io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:dns-server,%s\n",
			strings.Join(addrList, ",")))
	}
	if netstatus.NtpServer != nil {
		io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:ntp-server,%s\n",
			netstatus.NtpServer.String()))
	} else {
		ntpStr := ""
		for _, s := range ntpServers {
			ntpStr += "," + s.String()
		}
		if len(ntpStr) != 0 {
			io.WriteString(buffer, "dhcp-option=option:ntp-server"+ntpStr+"\n")
		}
	}
	if netstatus.Subnet.IP != nil {
		ipv4Netmask = net.IP(netstatus.Subnet.Mask).String()
	}
	if netstatus.Subnet.IP != nil {
		if advertizeRouter && !ctx.disableDHCPAllOnesNetMask {
			// Network prefix "255.255.255.255" will force packets to go through
			// dom0 virtual router that makes the packets pass through ACLs and flow log.
			io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:netmask,%s\n",
				"255.255.255.255"))
		} else {
			io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:netmask,%s\n",
				ipv4Netmask))
		}
	}
	if advertizeRouter {
		// IPv6 XXX needs to be handled in radvd
		if !isIPv6 {
			io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:router,%s\n",
				router))
			if !ctx.disableDHCPAllOnesNetMask {
				io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:classless-static-route,%s/32,%s,%s,%s,%s,%s\n",
					router, "0.0.0.0",
					"0.0.0.0/0", router,
					netstatus.Subnet.String(), router))
			}
		}
	} else {
		log.Functionf("createDnsmasqConfigletToWriter: no router\n")
		if !isIPv6 {
			io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:router\n"))
		}
		if !advertizeDns {
			// Handle isolated network by making sure
			// we are not a DNS server. Can be overridden
			// with the DnsServers above
			log.Functionf("createDnsmasqConfigletToWriter: no DNS server\n")
			io.WriteString(buffer, fmt.Sprintf("dhcp-option=option:dns-server\n"))
		}
	}
	if isIPv6 {
		io.WriteString(buffer, "dhcp-range=::static,0,60m\n")
	} else {
		dhcpRange, err := dhcpv4RangeConfig(netstatus.DhcpRange.Start, netstatus.DhcpRange.End)
		if err != nil {
			log.Fatalf("dhcpv4RangeConfigLine failed with %+v", err)
		}
		io.WriteString(buffer, fmt.Sprintf("dhcp-range=%s,%s,60m\n",
			dhcpRange, ipv4Netmask))
	}
}

func addhostDnsmasq(bridgeName string, appMac string, appIPAddr string,
	hostname string) {

	log.Functionf("addhostDnsmasq(%s, %s, %s, %s)\n", bridgeName, appMac,
		appIPAddr, hostname)
	if dnsmasqStopStart {
		stopDnsmasq(bridgeName, true, false)
	}
	ip := net.ParseIP(appIPAddr)
	if ip == nil {
		log.Warnf("addhostDnsmasq failed to parse IP %s", appIPAddr)
		return
	}
	isIPv6 := (ip.To4() == nil)
	suffix := ".inet"
	if isIPv6 {
		suffix += "6"
	}

	dhcphostsDir := dnsmasqDhcpHostDir(bridgeName)
	ensureDir(dhcphostsDir)
	cfgPathname := dhcphostsDir + "/" + appMac + suffix

	file, err := os.Create(cfgPathname)
	if err != nil {
		log.Fatal("addhostDnsmasq failed ", err)
	}
	defer file.Close()
	if isIPv6 {
		file.WriteString(fmt.Sprintf("%s,[%s],%s\n",
			appMac, appIPAddr, hostname))
	} else {
		file.WriteString(fmt.Sprintf("%s,id:*,%s,%s\n",
			appMac, appIPAddr, hostname))
	}
	file.Close()
	if dnsmasqStopStart {
		startDnsmasq(bridgeName)
	}
}

func removehostDnsmasq(bridgeName string, appMac string, appIPAddr string) {

	log.Functionf("removehostDnsmasq(%s, %s, %s)\n",
		bridgeName, appMac, appIPAddr)
	stopDnsmasq(bridgeName, true, false)
	ip := net.ParseIP(appIPAddr)
	if ip == nil {
		log.Fatalf("removehostDnsmasq failed to parse IP %s", appIPAddr)
	}
	isIPv6 := (ip.To4() == nil)
	suffix := ".inet"
	if isIPv6 {
		suffix += "6"
	}

	dhcphostsDir := dnsmasqDhcpHostDir(bridgeName)
	ensureDir(dhcphostsDir)

	cfgPathname := dhcphostsDir + "/" + appMac + suffix
	if _, err := os.Stat(cfgPathname); err != nil {
		log.Functionf("removehostDnsmasq(%s, %s) failed: %s\n",
			bridgeName, appMac, err)
	} else {
		if err := os.Remove(cfgPathname); err != nil {
			errStr := fmt.Sprintf("removehostDnsmasq %v", err)
			log.Errorln(errStr)
		}
	}
	startDnsmasq(bridgeName)
}

func deleteDnsmasqConfiglet(bridgeName string) {

	log.Functionf("deleteDnsmasqConfiglet(%s)\n", bridgeName)
	cfgPathname := dnsmasqConfigPath(bridgeName)
	if _, err := os.Stat(cfgPathname); err == nil {
		if err := os.Remove(cfgPathname); err != nil {
			errStr := fmt.Sprintf("deleteDnsmasqConfiglet %v",
				err)
			log.Errorln(errStr)
		}
	}
	dhcphostsDir := dnsmasqDhcpHostDir(bridgeName)
	ensureDir(dhcphostsDir)
	if err := RemoveDirContent(dhcphostsDir); err != nil {
		errStr := fmt.Sprintf("deleteDnsmasqConfiglet %v", err)
		log.Errorln(errStr)
	}
}

func RemoveDirContent(dir string) error {
	files, err := os.ReadDir(dir)
	if err != nil {
		return err
	}
	for _, file := range files {
		filename := dir + "/" + file.Name()
		log.Functionln("RemoveDirContent found ", filename)
		err = os.RemoveAll(filename)
		if err != nil {
			return err
		}
	}
	return nil
}

// Run this:
//
//	${DMDIR}/dnsmasq -b -C /run/zedrouter/dnsmasq.${BRIDGENAME}.conf
func startDnsmasq(bridgeName string) {

	log.Functionf("startDnsmasq(%s)\n", bridgeName)
	cfgPathname := dnsmasqConfigPath(bridgeName)
	name := "nohup"
	args := []string{
		"/opt/zededa/bin/dnsmasq",
		"-C",
		cfgPathname,
	}
	log.Functionf("Calling command %s %v\n", name, args)
	out, err := base.Exec(log, name, args...).CombinedOutput()
	if err != nil {
		log.Errorf("startDnsmasq: Failed starting dnsmasq for bridge %s (%s)",
			bridgeName, err)
	} else {
		log.Functionf("startDnsmasq: Started dnsmasq with output: %s", out)
	}
}

func stopDnsmasq(bridgeName string, printOnError bool, delConfiglet bool) {

	log.Functionf("stopDnsmasq(%s)\n", bridgeName)
	pidfile := fmt.Sprintf("/run/dnsmasq.%s.pid", bridgeName)
	pidByte, err := os.ReadFile(pidfile)
	if err != nil {
		log.Errorf("stopDnsmasq: pid file read error %v\n", err)
		return
	}
	pidStr := string(pidByte)
	pidStr = strings.TrimSuffix(pidStr, "\n")
	pidStr = strings.TrimSpace(pidStr)
	pid, err := strconv.Atoi(pidStr)
	if err != nil {
		log.Errorf("stopDnsmasq: pid convert error %v\n", err)
		return
	}

	cfgFilename := dnsmasqConfigFile(bridgeName)
	utils.PkillArgs(log, cfgFilename, printOnError, false)

	startCheckTime := time.Now()
	// check and wait until the process is gone or maximum of 60 seconds is reached
	for {
		p, err := os.FindProcess(pid)
		if err == nil {
			err = p.Signal(syscall.Signal(0))
			if err != nil {
				log.Functionf("stopDnsmasq: kill process done for %d\n", pid)
				break
			} else {
				log.Functionf("stopDnsmasq: wait for %d to finish\n", pid)
			}
			if time.Since(startCheckTime).Seconds() > 60 {
				log.Errorf("stopDnsmasq: kill dnsmasq on %s pid %d not finish in 60 seconds\n", bridgeName, pid)
				break
			}
			time.Sleep(1 * time.Second)
		} else {
			log.Functionf("stopDnsmasq: find dnsmasq process %s error %v\n", pidStr, err)
			break
		}
	}

	err = os.Remove(pidfile)
	if err != nil && printOnError {
		log.Errorf("stopDnsmasq: remove pidfile %s error %v", pidfile, err)
	}

	if delConfiglet {
		deleteDnsmasqConfiglet(bridgeName)
	}
}

func isEmptyIP(ip net.IP) bool {
	return ip == nil || ip.Equal(net.IP{})
}

// When we restart dnsmasq with smaller changes like changing DNS server
// file configuration, we should not delete the hosts configuration for
// that has the IP address allotment information.
func deleteOnlyDnsmasqConfiglet(bridgeName string) {

	log.Functionf("deleteOnlyDnsmasqConfiglet(%s)\n", bridgeName)
	cfgPathname := dnsmasqConfigPath(bridgeName)
	if _, err := os.Stat(cfgPathname); err == nil {
		if err := os.Remove(cfgPathname); err != nil {
			errStr := fmt.Sprintf("deleteOnlyDnsmasqConfiglet %v",
				err)
			log.Errorln(errStr)
		}
	}
}
